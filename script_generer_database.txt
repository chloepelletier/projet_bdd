DROP DATABASE basketballer;
create database basketballer;
use basketballer;

show tables;


CREATE TABLE equipe (num_equipe int UNSIGNED, nom_equipe char(20), ville char(20), pays char(20), 
	fondation date, PRIMARY KEY(num_equipe));

CREATE TABLE joueur (id_joueur int UNSIGNED, prenom char(20),
	nom_famille char(20), naissance date, taille_ft real UNSIGNED, poids_lbs real UNSIGNED,
	role char(20), est_droitier bool, dist_bras_ft real UNSIGNED,
	PRIMARY KEY(id_joueur));

CREATE TABLE partie (annee int UNSIGNED, num_partie int UNSIGNED, ville char(20), date_partie date,
	PRIMARY KEY(annee, num_partie));
/*DF date_partie -> annee.
  Ajouter est_serie bool ? (Redondant. Mieux d eregarder dans 'appartient')
*/

/* Crée une genre DF: annee, date -> num_partie (nouvelle clé candidate) */
/* Donc pas ajouté, aps testé
delimiter //
CREATE TRIGGER parties_saison_ordre_chrono
BEFORE INSERT ON partie
FOR EACH ROW
BEGIN
IF (EXISTS (SELECT NULL
			FROM partie P
			WHERE P.annee=NEW.annee AND P.num_partie < P.num_partie.NEW
			AND P.date_partie > NEW.date_partie))
OR
(EXISTS (SELECT NULL
			FROM partie P
			WHERE P.annee=NEW.annee AND P.num_partie > P.num_partie.NEW
			AND P.date_partie < NEW.date_partie))
THEN SET NEW.annee = null;
END IF;
END;//
delimiter ;
pas ajouté, pas testé */

CREATE TABLE serie (annee int UNSIGNED, num_serie int UNSIGNED, PRIMARY KEY(annee, num_serie));

CREATE TABLE appartient(annee int UNSIGNED, num_partie int UNSIGNED NOT NULL, num_serie int UNSIGNED NOT NULL, num_sous_serie int UNSIGNED NOT NULL,
	PRIMARY KEY(annee, num_serie, num_sous_serie),
	UNIQUE (annee, num_partie),
	FOREIGN KEY(annee, num_partie) REFERENCES partie(annee, num_partie) ON DELETE CASCADE,
	FOREIGN KEY(annee, num_serie) REFERENCES serie(annee, num_serie) ON DELETE CASCADE);
/* Ayant la partie, on peut trouver la date et donc l,Ordre (num_sous_serie). (redondant) */
	
	
delimiter //
CREATE TRIGGER max7_parties_par_serie
BEFORE INSERT ON appartient
FOR EACH ROW
BEGIN
IF  (0 >= NEW.num_sous_serie) OR (NEW.num_sous_serie > 7)
OR
(	SELECT COUNT(*)
	FROM appartient
	WHERE annee=NEW.annee AND num_serie = NEW.num_serie
	) = 7
THEN SET NEW.annee = null;
END IF;
END;//
delimiter ;
/*Deuxième partie du trigger laissée pour raison historique lol */

delimiter //
CREATE TRIGGER ordre_chronologique_serie
BEFORE INSERT ON appartient
FOR EACH ROW
BEGIN
IF (EXISTS (SELECT NULL
			FROM appartient A, partie PN, partie P1
			WHERE A.annee=NEW.annee AND A.num_serie=NEW.num_serie
			AND A.num_sous_serie =(NEW.num_sous_serie-1)
			AND PN.annee = A.annee and PN.num_partie = A.num_partie
			AND P1.annee = A.annee AND P1.num_partie = A.num_partie
			AND P1.date_partie > PN.date_partie))
OR
(EXISTS (SELECT NULL
			FROM appartient A, partie PN, partie P2
			WHERE A.annee=NEW.annee AND A.num_serie=NEW.num_serie
			AND A.num_sous_serie =(NEW.num_sous_serie+1)
			AND PN.annee = A.annee and PN.num_partie = A.num_partie
			AND P2.annee = A.annee AND P2.num_partie = A.num_partie
			AND P2.date_partie < PN.date_partie))
THEN SET NEW.annee = null;
END IF;
END;//
delimiter ;
/* Pourrait essayer de corriger en inversant les numéros de num_sous_serie */


CREATE TABLE concoure(annee int UNSIGNED, num_partie int UNSIGNED, num_equipe_loc int UNSIGNED NOT NULL, num_equipe_vis int UNSIGNED NOT NULL,
	points_loc int UNSIGNED DEFAULT 0, points_vis int UNSIGNED DEFAULT 0,
	PRIMARY KEY(annee, num_partie),
	FOREIGN KEY(annee, num_partie) REFERENCES partie(annee, num_partie) ON DELETE CASCADE,
	FOREIGN KEY(num_equipe_loc) REFERENCES equipe(num_equipe) ON DELETE CASCADE,
	FOREIGN KEY(num_equipe_vis) REFERENCES equipe(num_equipe) ON DELETE CASCADE);
/*Points sont évidemment une redondance */

CREATE TABLE contrat(num_equipe int UNSIGNED NOT NULL, id_joueur int UNSIGNED NOT NULL,
	debut_incl date NOT NULL, fin_excl date DEFAULT '9999-12-31' NOT NULL, dossard int UNSIGNED NOT NULL,
	PRIMARY KEY(id_joueur, debut_incl),
	UNIQUE (num_equipe, debut_incl, dossard),
	FOREIGN KEY(id_joueur) REFERENCES joueur(id_joueur) ON DELETE CASCADE,
	FOREIGN KEY(num_equipe) REFERENCES equipe(num_equipe) ON DELETE CASCADE);


delimiter //
CREATE TRIGGER date_coherentes
BEFORE INSERT ON contrat
FOR EACH ROW
BEGIN
  IF ( NEW.fin_excl <= NEW.debut_incl )
  THEN SET NEW.debut_incl = null;
  END IF;
END;//
delimiter ;

delimiter //
CREATE TRIGGER max_1_dossard
BEFORE INSERT ON contrat
FOR EACH ROW
BEGIN
  IF(SELECT COUNT(*)
    FROM contrat
    WHERE num_equipe = NEW.num_equipe
      AND debut_incl < NEW.fin_excl AND NEW.debut_incl < fin_excl
      AND dossard = NEW.dossard
    ) > 0
  THEN SET NEW.debut_incl = null;
  END IF;
END;//
delimiter ;
/* Avant, beuacoup moins efficace:
  AND ((debut_incl between NEW.debut_incl and NEW.fin_excl)
  OR (fin_excl - interval 1 day between NEW.debut_incl  and NEW.fin_excl))
*/

delimiter //
CREATE TRIGGER max_1_contrat
BEFORE INSERT ON contrat
FOR EACH ROW
BEGIN
IF (
  SELECT COUNT(*)
  FROM contrat
  WHERE id_joueur = NEW.id_joueur
    AND debut_incl < NEW.fin_excl AND NEW.debut_incl < fin_excl
  ) > 0
THEN SET NEW.debut_incl = null;
END IF;
END;//
delimiter ;

CREATE TABLE participe(id_joueur int UNSIGNED, annee int UNSIGNED, num_partie int UNSIGNED NOT NULL, minutes int UNSIGNED DEFAULT 0,
	PRIMARY KEY(annee, num_partie, id_joueur),
	FOREIGN KEY(annee, num_partie) REFERENCES partie(annee, num_partie) ON DELETE CASCADE,
	FOREIGN KEY(id_joueur) REFERENCES joueur(id_joueur) ON DELETE CASCADE);

delimiter //
CREATE TRIGGER joueur_bonne_equipe
BEFORE INSERT ON participe
FOR EACH ROW
BEGIN
IF(SELECT COUNT(*)
     FROM partie P, concoure Cc, contrat Ct
     WHERE P.annee = NEW.annee AND P.num_partie = NEW.num_partie
      AND Cc.annee = NEW.annee AND Cc.num_partie = NEW.num_partie
      AND (Ct.num_equipe = Cc.num_equipe_loc OR Ct.num_equipe = Cc.num_equipe_vis) AND Ct.id_joueur = NEW.id_joueur
      AND Ct.debut_incl <= P.date_partie AND P.date_partie < Ct.fin_excl
    ) <> 1
THEN SET NEW.id_joueur = null;
END IF;
END;//
delimiter ;

delimiter //
CREATE TRIGGER 12_joueurs_par_equipe
BEFORE INSERT ON participe
FOR EACH ROW
BEGIN
IF	(SELECT COUNT(Ct2.id_joueur)
	FROM partie Pe, participe Pp, concoure Cc, contrat Ct1, contrat ct2
    	WHERE Pe.annee = NEW.annee AND Pe.num_partie = NEW.num_partie
    	 AND Pp.annee = NEW.annee AND Pp.num_partie = NEW.num_partie
     	 AND Cc.annee = NEW.annee AND Cc.num_partie = NEW.num_partie
     	 AND Ct1.num_equipe = Cc.num_equipe_loc AND Ct1.id_joueur = NEW.id_joueur 
     	 AND Ct1.debut_incl <= Pe.date_partie AND Pe.date_partie < Ct1.fin_excl
	 AND Ct2.num_equipe = Ct1.num_equipe AND Ct2.id_joueur = Pp.id_joueur
	 AND Ct2.debut_incl <= Pe.date_partie AND Pe.date_partie < Ct2.fin_excl
	) = 12 
THEN SET NEW.id_joueur = null;
END IF;
END;//
delimiter ;


CREATE TABLE type_action(type char(20), PRIMARY KEY(type));
INSERT INTO type_action VALUES ("lancer"), ("revirement"), ("faute"), ("rebond");

CREATE TABLE action (annee int UNSIGNED, num_partie int UNSIGNED, instant time, type_action char(20),
	id_joueur int UNSIGNED NOT NULL,
	PRIMARY KEY(annee, num_partie, instant),
	FOREIGN KEY(annee, num_partie) REFERENCES partie(annee, num_partie) ON DELETE CASCADE,
	FOREIGN KEY(type_action) REFERENCES type_action(type) ON DELETE CASCADE,
	FOREIGN KEY(annee, num_partie,id_joueur) REFERENCES participe(annee, num_partie,id_joueur)
		ON DELETE CASCADE);
/* Le numéro d'équipe est une redondance, mais éviterait de fouiller lescontrats sans arrêt */



CREATE TABLE type_lancer(type char(20), PRIMARY KEY(type));
INSERT INTO type_lancer VALUES ("1pt"), ("2pt"), ("3pt");

CREATE TABLE lancer (annee int UNSIGNED, num_partie int UNSIGNED, instant time, type_lancer char(20) NOT NULL, est_panier bool NOT NULL,
	PRIMARY KEY(annee, num_partie, instant),
	FOREIGN KEY(type_lancer) REFERENCES type_lancer(type),
	FOREIGN KEY(annee, num_partie, instant) REFERENCES action(annee, num_partie, instant)
		ON DELETE CASCADE);
delimiter //
CREATE TRIGGER type_action_lancer
BEFORE INSERT ON lancer
FOR EACH ROW
BEGIN
	IF (	SELECT type_action
		FROM action
		WHERE annee = NEW.annee AND num_partie = NEW.num_partie AND instant = NEW.instant)
	 <> "lancer"
	THEN SET NEW.instant = null;
	END IF;
END;//
delimiter ;
   
delimiter //
CREATE TRIGGER update_points_au_panier
BEFORE INSERT ON lancer
FOR EACH ROW
BEGIN
IF (NEW.est_panier)
THEN
    SET @points = (SELECT( 1*COUNT(IF(NEW.type_lancer = "1pt",1,NULL)) +
			2*COUNT(IF(NEW.type_lancer = "2pt",1,NULL)) +
			3*COUNT(IF(NEW.type_lancer = "3pt",1,NULL))));

	SET @equipe_local =
	(SELECT COUNT(*)
	FROM partie P, concoure Cc, contrat Ct, action A
		 WHERE P.annee = NEW.annee AND P.num_partie = NEW.num_partie
		  AND Cc.annee = NEW.annee AND Cc.num_partie = NEW.num_partie
		  AND A.annee=NEW.annee AND A.num_partie=NEW.num_partie AND A.instant=NEW.instant
		  AND Ct.num_equipe = Cc.num_equipe_loc AND Ct.id_joueur = A.id_joueur
		  AND Ct.debut_incl <= P.date_partie AND P.date_partie < Ct.fin_excl );
		  
	IF(@equipe_local > 0)
	THEN 
		UPDATE concoure
		SET points_loc = points_loc + @points
		WHERE annee=NEW.annee AND num_partie=NEW.num_partie;
	ELSE
		UPDATE concoure
		SET points_vis = points_vis + @points
		WHERE annee=NEW.annee AND num_partie=NEW.num_partie;
	END IF;
    
END IF;
END;//
delimiter ;

delimiter //
CREATE TRIGGER retirer_points_au_panier
AFTER DELETE ON lancer
FOR EACH ROW
BEGIN
IF (OLD.est_panier)
THEN
    SET @points = (SELECT( 1*COUNT(IF(OLD.type_lancer = "1pt",1,NULL)) +
			2*COUNT(IF(OLD.type_lancer = "2pt",1,NULL)) +
			3*COUNT(IF(OLD.type_lancer = "3pt",1,NULL))));

	SET @equipe_local =
	(SELECT COUNT(*)
	FROM partie P, concoure Cc, contrat Ct, action A
		 WHERE P.annee = NEW.annee AND P.num_partie = NEW.num_partie
		  AND Cc.annee = NEW.annee AND Cc.num_partie = NEW.num_partie
		  AND A.annee=NEW.annee AND A.num_partie=NEW.num_partie AND A.instant=NEW.instant
		  AND Ct.num_equipe = Cc.num_equipe_loc AND Ct.id_joueur = A.id_joueur
		  AND Ct.debut_incl <= P.date_partie AND P.date_partie < Ct.fin_excl );
		  
	IF(@equipe_local > 0)
	THEN 
		UPDATE concoure
		SET points_loc = points_loc - @points
		WHERE annee=NEW.annee AND num_partie=NEW.num_partie;
	ELSE
		UPDATE concoure
		SET points_vis = points_vis - @points
		WHERE annee=NEW.annee AND num_partie=NEW.num_partie;
	END IF;
END IF;
END;//
delimiter ;

delimiter //
CREATE TRIGGER modifier_points_au_panier
EBFORE UPDATE ON lancer
FOR EACH ROW
BEGIN
	SET @n_points = (SELECT( 1*COUNT(IF(NEW.type_lancer = "1pt",1,NULL)) +
			2*COUNT(IF(NEW.type_lancer = "2pt",1,NULL)) +
			3*COUNT(IF(NEW.type_lancer = "3pt",1,NULL))));
	SET @o_points= (SELECT( 1*COUNT(IF(OLD.type_lancer = "1pt",1,NULL)) +
			2*COUNT(IF(OLD.type_lancer = "2pt",1,NULL)) +
			3*COUNT(IF(OLD.type_lancer = "3pt",1,NULL))));
	SET @d_points = n_points - o_points;
	SET @equipe_local =
		(SELECT COUNT(*)
		FROM partie P, concoure Cc, contrat Ct, action A
			 WHERE P.annee = NEW.annee AND P.num_partie = NEW.num_partie
			  AND Cc.annee = NEW.annee AND Cc.num_partie = NEW.num_partie
			  AND A.annee=NEW.annee AND A.num_partie=NEW.num_partie AND A.instant=NEW.instant
			  AND Ct.num_equipe = Cc.num_equipe_loc AND Ct.id_joueur = A.id_joueur
			  AND Ct.debut_incl <= P.date_partie AND P.date_partie < Ct.fin_excl );
	IF (OLD.est_panier AND NEW.est_panier) THEN
		
		IF(@equipe_local > 0) THEN 
			UPDATE concoure
			SET points_loc = points_loc + @d_points
			WHERE annee=NEW.annee AND num_partie=NEW.num_partie;
		ELSE
			UPDATE concoure
			SET points_vis = points_vis + @d_points
			WHERE annee=NEW.annee AND num_partie=NEW.num_partie;
		END IF;
	ELSEIF(OLD.est_panier AND NOT NEW.est_panier) THEN
		IF(@equipe_local > 0) THEN 
			UPDATE concoure
			SET points_loc = points_loc - @o_points
			WHERE annee=NEW.annee AND num_partie=NEW.num_partie;
		ELSE
			UPDATE concoure
			SET points_vis = points_vis - @o_points
			WHERE annee=NEW.annee AND num_partie=NEW.num_partie;
		END IF;
	ELSEIF(NOT OLD.est_panier AND NEW.est_panier) THEN
		IF(@equipe_local > 0) THEN 
			UPDATE concoure
			SET points_loc = points_loc + @n_points
			WHERE annee=NEW.annee AND num_partie=NEW.num_partie;
		ELSE
			UPDATE concoure
			SET points_vis = points_vis + @n_points
			WHERE annee=NEW.annee AND num_partie=NEW.num_partie;
		END IF;
	END IF;
END;//
delimiter ;



CREATE TABLE assiste(id_joueur int UNSIGNED NOT NULL, annee int UNSIGNED, num_partie int UNSIGNED, instant time,
	PRIMARY KEY(annee, num_partie, instant),
	FOREIGN KEY(annee, num_partie, instant) REFERENCES lancer(annee, num_partie, instant)
		ON DELETE CASCADE,
	FOREIGN KEY(annee, num_partie,id_joueur) REFERENCES participe(annee, num_partie,id_joueur)
		ON DELETE CASCADE);

delimiter //
CREATE TRIGGER assiste_panier
BEFORE INSERT ON assiste
FOR EACH ROW
BEGIN
	IF (	SELECT est_panier
		FROM lancer
		WHERE annee = NEW.annee AND num_partie = NEW.num_partie AND instant = NEW.instant)
	 = false
	THEN SET NEW.instant = null;
	END IF;
END;//
delimiter ;
/* Ajouter 1 autre pour update? */

delimiter //
CREATE TRIGGER assiste_mauvaise_equipe
BEFORE INSERT ON assiste
FOR EACH ROW
BEGIN
IF(SELECT COUNT(*)
     FROM action A, partie P, contrat Ct1, contrat Ct2
     WHERE  A.annee = NEW.annee AND A.num_partie = NEW.num_partie AND A.instant = NEW.instant
	AND P.annee = NEW.annee AND P.num_partie = NEW.num_partie
      	AND Ct1.id_joueur = A.id_joueur
      	AND Ct1.debut_incl <= P.date_partie AND P.date_partie < Ct1.fin_excl
	AND Ct2.num_equipe = Ct1.num_equipe AND Ct2.id_joueur = NEW.id_joueur
	AND Ct2.debut_incl <= P.date_partie AND P.date_partie < Ct2.fin_excl
    ) = 0	
THEN SET NEW.instant = null;
END IF;
END;//
delimiter ;


CREATE TABLE type_faute(type char(20), PRIMARY KEY(type));
INSERT INTO type_faute VALUES ("offensif"), ("defensif");

CREATE TABLE revirement (annee int UNSIGNED, num_partie int UNSIGNED, instant time, type_revirement char(20) NOT NULL,
	PRIMARY KEY(annee, num_partie, instant),
	FOREIGN KEY(type_revirement) REFERENCES type_faute(type),
	FOREIGN KEY(annee, num_partie, instant) REFERENCES action(annee, num_partie, instant)
		ON DELETE CASCADE);
delimiter //
CREATE TRIGGER type_action_revirement
BEFORE INSERT ON revirement
FOR EACH ROW
BEGIN
	IF (	SELECT type_action
		FROM action
		WHERE annee = NEW.annee AND num_partie = NEW.num_partie AND instant = NEW.instant)
	 <> "revirement"
	THEN SET NEW.instant = null;
	END IF;
END;//
delimiter ;

CREATE TABLE faute (annee int UNSIGNED, num_partie int UNSIGNED, instant time, type_faute char(20) NOT NULL,
	PRIMARY KEY(annee, num_partie, instant),
	FOREIGN KEY(type_faute) REFERENCES type_faute(type),
	FOREIGN KEY(annee, num_partie, instant) REFERENCES action(annee, num_partie, instant)
		ON DELETE CASCADE);
delimiter //
CREATE TRIGGER type_action_faute
BEFORE INSERT ON faute
FOR EACH ROW
BEGIN
	IF (	SELECT type_action
		FROM action
		WHERE annee = NEW.annee AND num_partie = NEW.num_partie AND instant = NEW.instant)
	 <> "faute"
	THEN SET NEW.instant = null;
	END IF;
END;//
delimiter ;


CREATE TABLE rebond (annee int UNSIGNED, num_partie int UNSIGNED, instant time, type_rebond char(20) NOT NULL,
	PRIMARY KEY(annee, num_partie, instant),
	FOREIGN KEY(type_rebond) REFERENCES type_faute(type),
	FOREIGN KEY(annee, num_partie, instant) REFERENCES action(annee, num_partie, instant) 
		ON DELETE CASCADE);
delimiter //
CREATE TRIGGER type_action_rebond
BEFORE INSERT ON rebond
FOR EACH ROW
BEGIN
	IF (	SELECT type_action
		FROM action
		WHERE annee = NEW.annee AND num_partie = NEW.num_partie AND instant = NEW.instant)
	 <> "rebond"
	THEN SET NEW.instant = null;
	END IF;
END;//
delimiter ;


show tables;